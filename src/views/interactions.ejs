<style>
  .node-text {
    font-family: "Source Sans Pro", sans-serif !important;
    font-size: 16px !important;
  }

  .node circle {
    fill: #fff;
    stroke: steelblue;
    stroke-width: 3px;
  }

  /* .node text {
    font: 12px sans-serif;
  } */

  .tree-link {
    fill: none;
    stroke: #ccc;
    stroke-width: 2px;
  }

  .add-button-supplement {
    margin-left: -70px;
  }

  /* code pen css */
  text {
    pointer-events: none;
  }

  .inner_node rect {
    pointer-events: all;
  }

  .link {
    fill: none;

    stroke-width: 2px;
  }

  .inner_node rect.highlight {
    stroke: #315b7e;
    stroke-width: 2px;
  }

  .outer_node rect.highlight {
    stroke: #315b7e;
    stroke-width: 2px;
  }
</style>
<div class="container">
<<<<<<< HEAD
  <div class="alert alert-warning mt-2 error-message text-center" role="alert">

=======
  <div class="row mt-3">
    <div class="alert alert-info info-message offset-md-3 col-md-6">
      Please select from the first dropdown
    </div>
>>>>>>> eb7fafd51e1d12ab07f85c544479bf789f2c8800
  </div>
  <div class="row mt-3">
    <div class="col-md-3 offset-md-1">
      <select
        name="interaction-one"
        id="interaction-one"
        class="form-control"
        placeholder="Select Drug/ Dietary Supplement / Ingredient"
      >
        <option value="" selected disabled>Please Select</option>
        <option value="drug">Drug</option>
        <option value="dsp">Dietery Supplement</option>
        <option value="ingredient">Ingredient</option>
      </select>
    </div>
    <div class="col-md-3">
      <div class="col-md-10 offset-md-1">
        <select name="relationship" id="relationship" class="form-control">
        </select>
      </div>
    </div>
    <div class="col-md-4">
      <div class="col-md-10">
        <select
          name="interaction-two"
          id="interaction-two"
          class="form-control"
        >
        </select>
      </div>
    </div>
    <div class="col-md-1"></div>
  </div>
  <div class="row mt-3 alert-row">
    <div class="col-md-6 offset-md-3">
      <div class="alert alert-info info-message-input"></div>
    </div>
  </div>
  <div class="row mt-3 hide">
    <div class="col-md-3 offset-md-1 remove-content">
      <div class="form-group">
<<<<<<< HEAD
        <input type="text" class="form-control" id="interaction-one-name" list="interaction-one-list"
          name="interaction-one-name" autocomplete="off">
        <datalist id="interaction-one-list">
        </datalist>
=======
        <input
          type="text"
          class="form-control"
          id="interaction-one-name"
          list="interaction-one-list"
          name="interaction-one-name"
          autocomplete="off"
          placeholder="Please Type"
        />
        <datalist id="interaction-one-list"> </datalist>
>>>>>>> eb7fafd51e1d12ab07f85c544479bf789f2c8800
      </div>
    </div>
    <!-- Drug and Supplement -->
    <div class="col-md-1 drug-supplement">
      <button class="btn btn-primary add-button-drug ">Add</button>
    </div>
    <div class="col-md-2 drug-supplement"></div>
    <!-- End Drug and Supplement -->
    <div class="col-md-3 empty-div remove-content normal"></div>
    <div class="col-md-4 interaction-two-col remove-content">
      <div class="form-group col-md-10">
<<<<<<< HEAD
        <input type="text" class="form-control" id="interaction-two-name" list="interaction-two-list"
          name="interaction-two-name" autocomplete="off">
        <datalist id="interaction-two-list">
        </datalist>
=======
        <input
          type="text"
          class="form-control"
          id="interaction-two-name"
          list="interaction-two-list"
          name="interaction-two-name"
          autocomplete="off"
          placeholder="Please Type"
        />
        <datalist id="interaction-two-list"> </datalist>
>>>>>>> eb7fafd51e1d12ab07f85c544479bf789f2c8800
      </div>
    </div>
    <!-- Drug and Supplement -->
    <div class="col-md-1 drug-supplement">
      <button class="btn btn-primary add-button-supplement">Add</button>
    </div>
    <!-- End Drug and Supplement -->
    <div class="col-md-1">
      <button class="btn btn-primary normal" id="search-button">Search</button>
    </div>
    <div class="col-md-1 normal"></div>
  </div>

  <!-- Drug and Supplement -->
  <!-- <div class="row mt-3 drug-supplement">
    <div class="col-md-3 offset-md-1">
      <div class="form-group">
        <input type="text" class="form-control" id="interaction-one-name" list="interaction-one-list"
          name="interaction-one-name" autocomplete="off">
        <datalist id="interaction-one-list">
        </datalist>
      </div>
    </div>
    <div class="col-md-1">
      <button class="btn btn-primary add-button">Add</button>
    </div>
    <div class="col-md-1"></div>
    <div class="col-md-3 offset-md-1 interaction-two-margin">
      <div class="form-group">
        <input type="text" class="form-control" id="interaction-two-name" list="interaction-two-list"
          name="interaction-two-name" autocomplete="off">
        <datalist id="interaction-two-list">
        </datalist>
      </div>
    </div>
    <div class="col-md-1">
      <button class="btn btn-primary add-button">Add</button>
    </div>
  </div> -->
  <!-- End Drug and Supplement -->
  <div class="row graph-visualization">
    <div class="col-md-2"></div>
    <div class="col-md-10 graph"></div>
    <!-- <div class="col-md-2"></div> -->
  </div>
</div>
<script>
  $(document).ready(function() {
    // var interactionTwoValues = [];
<<<<<<< HEAD
    $('.error-message').hide();
    $('.hide').hide();
    $('.drug-supplement').hide();
=======

    $(".error-message").hide();
    $(".hide").hide();
    $(".drug-supplement").hide();
    $(".alert-row").hide();
>>>>>>> eb7fafd51e1d12ab07f85c544479bf789f2c8800
    var relationship = {
      drug: {
        interacts_with: ["Dietary Supplements"]
      },
      dsp: {
        interacts_with: ["Drugs"],
        has: ["Ingredients", "Adverse Reactions"]
      },
      ingredient: {
        is_effective_for: ["Disease"],
        has: ["Adverse Reactions"]
      }
<<<<<<< HEAD
    }


    $('#interaction-one').change(function () {
      $('.hide').hide();
      $('.graph').html('');
      var interactionOne = $('#interaction-one').val();
=======
    };

    $("#interaction-one").change(function() {
      $(".hide").hide();
      $(".graph").html("");
      $(".info-message").show();
      $(".alert-row").hide();
      $(".info-message").text("Please select the Relationship.");
      supplements = [];
      drugs = [];
      var interactionOne = $("#interaction-one").val();
>>>>>>> eb7fafd51e1d12ab07f85c544479bf789f2c8800

      var optionString = "";
      $("#relationship").html("");
      $("#interaction-two").html("");
      $("#interaction-one-name").val("");
      optionString +=
        "<option value = '' selected disabled> Please Select </option>";
      for (var prop in relationship[interactionOne]) {
        optionString += "<option value='" + prop + "'>" + prop + "</option>";
      }
      $("#relationship").append(optionString);
    });
    $("#relationship").change(function() {
      var interactionTwo = "";
      var interactionOne = $("#interaction-one").val();
      $(".info-message").show();
      $(".info-message").text("Please select from the third dropdown.");
      $("#interaction-two").html("");

      var relationshipVal = $("#relationship").val();
      var interactionTwoValues = relationship[interactionOne][relationshipVal];

      interactionTwo +=
        "<option value = '' selected disabled> Please Select </option>";
      for (var i = 0; i < interactionTwoValues.length; i++) {
        interactionTwo +=
          "<option value='" +
          interactionTwoValues[i] +
          "'>" +
          interactionTwoValues[i] +
          "</option>";
      }
      $("#interaction-two").append(interactionTwo);
    });
    $("#interaction-two").change(function() {
      $(".info-message").hide();
      $(".hide").show();
      var interactionTwo = $("#interaction-two").val();
      if (
        interactionTwo == "Adverse Reactions" ||
        interactionTwo == "Disease"
      ) {
        $(".interaction-two-col").hide();
        $(".empty-div").hide();
      } else {
        $(".interaction-two-col").show();
        $(".empty-div").show();
      }
      var alertName = null;
      if ($("#interaction-one").val() == "dsp") {
        alertName = "Dietary Supplement";
      } else if ($("#interaction-one").val() == "drug") {
        alertName = "Drug";
      } else {
        alertName = "Ingredient";
      }
      $(".alert-row").show();
      $(".info-message-input").text("Please enter the name of a " + alertName);
    });

<<<<<<< HEAD
    $("#interaction-two").on("change", function () {
=======
    $("#interaction-two").on("change", function() {
      $("#interaction-two-name").val("");
>>>>>>> eb7fafd51e1d12ab07f85c544479bf789f2c8800
      var interactionOne = $("#interaction-one").val();
      var interactionTwo = $("#interaction-two").val();
      if (interactionOne == "drug" && interactionTwo == "Dietary Supplements") {
        $(".drug-supplement").show();
        $(".normal").hide();
        $("#interaction-one-list").empty();
        $("#interaction-two-list").empty();
<<<<<<< HEAD

      } else {
        $('.drug-supplement').hide();
        $('.normal').show();
        $('.empty-div').hide();
      }
    })
=======
      } else if (interactionOne == "dsp" && interactionTwo == "Drugs") {
        $(".drug-supplement").show();
        $(".normal").hide();
        $("#interaction-one-list").empty();
        $("#interaction-two-list").empty();
        $(".alert-row").show();
      } else {
        $(".drug-supplement").hide();
        $(".normal").show();
        $(".empty-div").hide();
      }
      // if (interactionOne == "dsp" && interactionTwo == "Drugs") {

      //   $('.drug-supplement').show();
      //   $('.normal').hide();
      //   $("#interaction-one-list").empty();
      //   $("#interaction-two-list").empty();

      // } else {
      //   $('.drug-supplement').hide();
      //   $('.normal').show();
      //   $('.empty-div').hide();
      // }
    });

    $("#interaction-two").on("change", function() {
      var interactionOne = $("#interaction-one").val();
      var interactionTwo = $("#interaction-two").val();
      if (interactionOne == "dsp" && interactionTwo == "Ingredients") {
        $(".interaction-two-col").hide();
      }
    });
>>>>>>> eb7fafd51e1d12ab07f85c544479bf789f2c8800

    var values = {
      dsp: 1,
      drug: 2,
      ingredient: 3
    };
    var interactionTwoMapping = {
      Ingredients: 3,
      Drugs: 2,
      "Dietary Supplements": 1
    };

    $("#interaction-one-name").on("focus change keydown", function() {
      console.log("interaction one name");
      $("#interaction-one-list").empty();

      var interactionOneName = $("#interaction-one-name").val();
      var interactionOne = $("#interaction-one").val();
      if ($("#interaction-one").val()) {
        $.ajax({
          type: "GET",
          crossDomain: true,
          // dataType: 'jsonp',
<<<<<<< HEAD
          url: 'KeyWords?type=' + values[interactionOne] + '&name=' + interactionOneName,
          success: function (jsondata) {
=======
          url:
            "http://localhost:8080/KeyWords?type=" +
            values[interactionOne] +
            "&name=" +
            interactionOneName,
          success: function(jsondata) {
>>>>>>> eb7fafd51e1d12ab07f85c544479bf789f2c8800
            $("#interaction-one-list").empty();
            $.each(jsondata, function(key, value) {
              $("#interaction-one-list").append(
                '<option value="' + value + '">'
              );
            });
          }
        });
      }
    });

<<<<<<< HEAD
    $("#interaction-two-name").on("focus change keydown", function () {
      if ($('#interaction-one-name').val() == '') {
        $('.error-message').html('Please add ' + $('#interaction-one').val());
        $('.error-message').show();
      } else if ($('#interaction-two').val() != '') {
=======
    $("#interaction-two-name").on("focus change keydown", function() {
      if ($("#interaction-two").val() != "") {
>>>>>>> eb7fafd51e1d12ab07f85c544479bf789f2c8800
        var interactionTwo = $("#interaction-two").val();
        var interactioTwoName = $("#interaction-two-name").val();
        $("#interaction-two-list").empty();
        if (
          interactionTwo == "Ingredients" ||
          interactionTwo == "Drugs" ||
          interactionTwo == "Dietary Supplements"
        ) {
          $.ajax({
            type: "GET",
            crossDomain: true,
            // dataType: 'jsonp',
<<<<<<< HEAD
            url: 'KeyWords?type=' + interactionTwoMapping[interactionTwo] + '&name=' + interactioTwoName,
            success: function (jsondata) {
=======
            url:
              "http://localhost:8080/KeyWords?type=" +
              interactionTwoMapping[interactionTwo] +
              "&name=" +
              interactioTwoName,
            success: function(jsondata) {
>>>>>>> eb7fafd51e1d12ab07f85c544479bf789f2c8800
              $("#interaction-two-list").empty();
              $.each(jsondata, function(key, value) {
                $("#interaction-two-list").append(
                  '<option value="' + value + '">'
                );
              });
            }
          });
        }
      }
    });

    var drugs = [];
    var supplements = [];
    $("#search-button").on("click", function() {
      $(".graph").html("");
      $(".alert-row").hide();
      var interactionOne = $("#interaction-one").val();
      var interactionTwo = $("#interaction-two").val();
      var interactionOneName = $("#interaction-one-name").val();
      var interactionTwoName = $("#interaction-two-name").val();
      console.log(interactionTwoName, interactionOneName);
      if (
        $("#interaction-one-name").val() != "" &&
        $("#interaction-two-name").val() == ""
      ) {
        if (interactionOne == "dsp" && interactionTwo == "Adverse Reactions") {
          $.ajax({
            type: "GET",
            crossDomain: true,
            // dataType: 'jsonp',
<<<<<<< HEAD
            url: 'DSPAdverseReaction?type=1&name=' + interactionOneName,
            success: function (jsondata) {

=======
            url:
              "http://localhost:8080/DSPAdverseReaction?type=1&name=" +
              interactionOneName,
            success: function(jsondata) {
              if (jsondata.length == 0) {
                $(".graph").append(
                  "<h5 style='margin-left: 250px; margin-top:200px;'> Data not available! </h5>"
                );
              }
>>>>>>> eb7fafd51e1d12ab07f85c544479bf789f2c8800
              data = convertToTreeFormat(interactionOneName, jsondata.sort());
              visualizeTreeData(data);
            }
          });
        } else if (
          interactionOne == "ingredient" &&
          interactionTwo == "Disease"
        ) {
          console.log("now");
          $.ajax({
            type: "GET",
            crossDomain: true,
            // dataType: 'jsonp',
<<<<<<< HEAD
            url: 'IngredientEffectiveFor?type=3&name=' + interactionOneName,
            success: function (jsondata) {
=======
            url:
              "http://localhost:8080/IngredientEffectiveFor?type=3&name=" +
              interactionOneName,
            success: function(jsondata) {
              if (jsondata.length == 0) {
                $(".graph").append(
                  "<h5 style='margin-left: 250px; margin-top:200px;'> Data not available! </h5>"
                );
              }
>>>>>>> eb7fafd51e1d12ab07f85c544479bf789f2c8800
              data = convertToTreeFormat(interactionOneName, jsondata.sort());
              visualizeTreeData(data);
            }
          });
<<<<<<< HEAD

        } else if (interactionOne == 'ingredient' && interactionTwo == 'Adverse Reactions') {
          console.log("now");
=======
        } else if (
          interactionOne == "ingredient" &&
          interactionTwo == "Adverse Reactions"
        ) {
>>>>>>> eb7fafd51e1d12ab07f85c544479bf789f2c8800
          $.ajax({
            type: "GET",
            crossDomain: true,
            // dataType: 'jsonp',
<<<<<<< HEAD
            url: 'IngredientEffectiveFor?type=3&name=' + interactionOneName,
            success: function (jsondata) {
=======
            url:
              "http://localhost:8080/IngredientHasAdverseReaction?type=3&name=" +
              interactionOneName,
            success: function(jsondata) {
              if (jsondata.length == 0) {
                $(".graph").append(
                  "<h5 style='margin-left: 250px; margin-top:200px;'> Data not available! </h5>"
                );
              }
>>>>>>> eb7fafd51e1d12ab07f85c544479bf789f2c8800
              data = convertToTreeFormat(interactionOneName, jsondata.sort());
              visualizeTreeData(data);
            }
          });
<<<<<<< HEAD

=======
        } else if (interactionOne == "dsp" && interactionTwo == "Ingredients") {
          $.ajax({
            type: "GET",
            crossDomain: true,
            // dataType: 'jsonp',
            url:
              "http://localhost:8080/DSPIngredients?type=1&name=" +
              interactionOneName,
            success: function(jsondata) {
              if (jsondata.length == 0) {
                $(".graph").append(
                  "<h5 style='margin-left: 250px; margin-top:200px;'> Data not available! </h5>"
                );
              }
              data = convertToTreeFormat(interactionOneName, jsondata.sort());
              console.log(data);
              visualizeTreeData(data);
            }
          });
>>>>>>> eb7fafd51e1d12ab07f85c544479bf789f2c8800
        }
      }
    });

<<<<<<< HEAD
    $('.add-button-drug').on("click", function () {
      var interactionOneName = $("#interaction-one-name").val();
      if (interactionOneName != '') {
        drugs.push(interactionOneName);
        $('#interaction-one-list').empty();
        // $("#interaction-one-name").val('');
        var drugs1 = Array.from(new Set(drugs));
        var supplements1 = Array.from(new Set(supplements))
        DrugSupplementAPI(drugs1, supplements1);
      }
    });

    $('.add-button-supplement').on("click", function () {
      var interactionTwoName = $("#interaction-two-name").val();
      if (interactionTwoName != '') {
        supplements.push(interactionTwoName);
        $('#interaction-two-list').empty();
        var supplements1 = Array.from(new Set(supplements))
        var drugs1 = Array.from(new Set(drugs));
        // $("#interaction-two-name").val('');
        DrugSupplementAPI(drugs1, supplements1);
=======
    $(".add-button-drug").on("click", function() {
      var interactionOne = $("#interaction-one").val();
      if (
        $("#interaction-two").val() != "Disease" &&
        $("#interaction-two").val() != "Adverse Reactions"
      ) {
        if ("#interaction-two-name".val == "") {
          $(".alert-row").show();
          $(".info-message-input").text(
            "Please enter the name of a " +
              capitalizeFirstLetter($("#interaction-two").val())
          );
        }
      }
      if (interactionOne == "dsp") {
        console.log(interactionOne);
        if ($("#interaction-one-name").val() != "") {
          supplements.push($("#interaction-one-name").val());
          $("#interaction-one-list").empty();
          // $("#interaction-one-name").val('');
          var drugs1 = Array.from(new Set(drugs));
          var supplements1 = Array.from(new Set(supplements));
          DrugSupplementAPI(drugs1, supplements1);
        }
      } else {
        var interactionOneName = $("#interaction-one-name").val();
        if (interactionOneName != "") {
          drugs.push(interactionOneName);
          $("#interaction-one-list").empty();
          // $("#interaction-one-name").val('');
          var drugs1 = Array.from(new Set(drugs));
          var supplements1 = Array.from(new Set(supplements));
          DrugSupplementAPI(drugs1, supplements1);
        }
      }
    });

    $(".add-button-supplement").on("click", function() {
      var interactionTwo = $("#interaction-two").val();
      $(".alert-row").hide();
      if (interactionTwo == "Drugs") {
        if ($("#interaction-two-name").val() != "") {
          drugs.push($("#interaction-two-name").val());
          $("#interaction-two-list").empty();
          // $("#interaction-one-name").val('');
          var drugs1 = Array.from(new Set(drugs));
          var supplements1 = Array.from(new Set(supplements));
          DrugSupplementAPI(drugs1, supplements1);
        }
      } else {
        var interactionTwoName = $("#interaction-two-name").val();
        if (interactionTwoName != "") {
          supplements.push(interactionTwoName);
          $("#interaction-two-list").empty();
          var supplements1 = Array.from(new Set(supplements));
          var drugs1 = Array.from(new Set(drugs));
          // $("#interaction-two-name").val('');
          DrugSupplementAPI(drugs1, supplements1);
        }
>>>>>>> eb7fafd51e1d12ab07f85c544479bf789f2c8800
      }
    });

    function DrugSupplementAPI(drugs, supplements) {
      console.log("d and s", drugs, supplements);
      var data = [];
      var supplements1 = supplements.join(",");
      var len = drugs.length;
      var data_rec = 0;
      var common_data = [];
      drugs.forEach(function(drug, index, arr) {
        $.ajax({
          type: "GET",
          crossDomain: true,
<<<<<<< HEAD
          url: 'SupVsMed?drug=' + drug + '&supp=' + supplements1,
          success: function (jsondata1) {
            console.log("Before", jsondata1)
=======
          url:
            "http://localhost:8080/SupVsMed?drug=" +
            drug +
            "&supp=" +
            supplements1,
          success: function(jsondata1) {
            console.log("Before", jsondata1);
>>>>>>> eb7fafd51e1d12ab07f85c544479bf789f2c8800
            data.push(jsondata1);
            common_data = common_data + jsondata1[1];
            data_rec = data_rec + 1;
            if (data_rec == len) {
              var common_data1 = new Set(common_data);
              var common_data2 = new Set(supplements);
              var diff = Array.from(
                new Set([...common_data2].filter(x => !common_data1.has(x)))
              );
              console.log(diff);
              console.log(common_data);
              console.log(supplements);
              console.log("ranbj");
              diff.forEach(function(d) {
                data.push(["", [d]]);
              });
              $(".graph").html("");
              visualizeDrugSupplement(data);
            }
          }
        });
      });

<<<<<<< HEAD
=======
      // if($("#interaction-one").val() == "dsp" && $("#interaction-two").val() == "Drugs"){

      // }
>>>>>>> eb7fafd51e1d12ab07f85c544479bf789f2c8800
    }

    function capitalizeFirstLetter(string) {
      return string.charAt(0).toUpperCase() + string.slice(1);
    }

    function convertToTreeFormat(name, jsondata) {
      var children = [];

      for (var i = 0; i < jsondata.length; i++) {
        console.log(jsondata.length);
        children.push({
          name: capitalizeFirstLetter(jsondata[i].toLowerCase()),
          actualName: jsondata[i],
          parent: name
        });
      }
      var treeData = [
        {
          name: capitalizeFirstLetter(name.toLowerCase()),
          actualName: name,
          parent: null,
          children: children
        }
      ];
      return treeData;
    }

    function visualizeTreeData(data) {
<<<<<<< HEAD
      var margin = { top: 20, right: 120, bottom: 20, left: 200 },
        width = 960 - margin.right - margin.left,
        height = (data[0].children.length*26) - margin.top - margin.bottom;
=======
      var margin = { top: 20, right: 120, bottom: 20, left: 300 },
        width = 960 - margin.right - margin.left,
        height = data[0].children.length * 40 - margin.top - margin.bottom;
>>>>>>> eb7fafd51e1d12ab07f85c544479bf789f2c8800

      var i = 0;

      var tree = d3.tree().size([height, width]);

      // var diagonal = d3.svg.diagonal()
      //   .projection(function (d) { return [d.y, d.x]; });

      var svg = d3
        .select(".graph")
        .style("overflow-y", "scroll")
        .style("height", "45rem")
        .append("svg")
        .attr("width", width + margin.right + margin.left)
        .attr("height", height + margin.top + margin.bottom)
        .append("g")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

      root = data[0];

      update(root);

      function update(source) {
        // Compute the new tree layout.
        var treeRoot = d3.hierarchy(root);
        tree(treeRoot);

        var nodes = treeRoot.descendants();
        var links = treeRoot.links();

        // var nodes = tree.nodes(root).reverse(),
        //   links = tree.links(nodes);

        // Normalize for fixed-depth.
        nodes.forEach(function(d) {
          d.y = d.depth * 180;
        });
        console.log("Nodes", nodes);
        // Declare the nodes…
        var node = svg.selectAll("g.node").data(nodes, function(d) {
          return d.id || (d.id = ++i);
        });

        // Enter the nodes.
        var nodeEnter = node
          .enter()
          .append("g")
          .attr("class", "node")
          .attr("transform", function(d) {
            return "translate(" + d.y + "," + d.x + ")";
          });

        nodeEnter
          .append("circle")
          .attr("r", 10)
<<<<<<< HEAD
          .style("fill", "#fff");
=======
          .style("fill", "#fff")
          .on("click", function(d) {
            console.log(d);
          });
>>>>>>> eb7fafd51e1d12ab07f85c544479bf789f2c8800

        nodeEnter
          .append("text")
          .attr("class", "node-text")
          .attr("x", function(d) {
            return d.children || d._children ? -13 : 13;
          })
          .attr("dy", ".35em")
          .attr("text-anchor", function(d) {
            return d.children || d._children ? "end" : "start";
          })
          .text(function(d) {
            return d.data.name;
          })
          .style("fill-opacity", 1);
        // .call(wrap, 250);

        // Declare the links…
        var link = svg.selectAll("path.link").data(links, function(d) {
          return d.target.id;
        });

        // Enter the links.
        link
          .enter()
          .insert("path", "g")
          .attr("class", "tree-link")
<<<<<<< HEAD
          .attr("d", d3.linkHorizontal()
             .y(function (d) { return d.x; })
             .x(function (d) { return d.y; }));

=======
          .attr(
            "d",
            d3
              .linkHorizontal()
              .y(function(d) {
                return d.x;
              })
              .x(function(d) {
                return d.y;
              })
          );
>>>>>>> eb7fafd51e1d12ab07f85c544479bf789f2c8800

        // function wrap(text, width) {
        //   text.each(function () {
        //     var text = d3.select(this),
        //       words = text.text().split(/\s+/).reverse(),
        //       word,
        //       line = [],
        //       lineNumber = 1,
        //       lineHeight = 12, // ems
        //       y = text.attr("y"),
        //       dy = parseFloat(text.attr("dy")),
        //       tspan = text.text(null).append("tspan").attr("x", 0).attr("y", y).attr("dy", dy + "px");
        //     while (word = words.pop()) {
        //       line.push(word);
        //       tspan.text(line.join(" "));
        //       if (tspan.node().getComputedTextLength() > width) {
        //         line.pop();
        //         tspan.text(line.join(" "));
        //         line = [word];
        //         tspan = text.append("tspan").attr("x", 0).attr("y", y).attr("dy", ++lineNumber * lineHeight * 0.75 + (dy) + "px").text(word);
        //       }
        //     }
        //   });
        // }
      }
    }
    function visualizeDrugSupplement(jsondata) {
      console.log("final data", jsondata);
      // jd1 = [["a", ["b"]], ["cd", []], ["", ["sd"]]]
      // jsondata = jd1

      var outer = d3.map();
      var inner = [];
      var links = [];

      var outerId = [0];

      // console.log(data.outer.reduce(function (a, b) { return a + b.related_links.length; }, 0) / data.outer.length);
      console.log("abcdbbcdbcbdbcb");
      console.log(jsondata, jsondata.length);
      jsondata.forEach(function(d) {
        console.log("hi i am here");
        if (d == null) return;

        i = {
          id: "i" + inner.length,
          index: inner.length,
          name: d[0],
          related_links: []
        };
        console.log(i);
        i.related_nodes = [i.id];
        if (i.name != "") {
          inner.push(i);
        }

        if (!Array.isArray(d[1])) d[1] = [d[1]];

        d[1].forEach(function(d1) {
          o = outer.get(d1);

          if (o == null) {
            o = { name: d1, id: "o" + outerId[0], related_links: [] };
            console.log(o);
            o.related_nodes = [o.id];
            outerId[0] = outerId[0] + 1;
            if (o.name != "") {
              outer.set(d1, o);
            }
          }

          // create the links
          l = { id: "l-" + i.id + "-" + o.id, inner: i, outer: o };
          if (o.name != "" && i.name != "") {
            links.push(l);
          }

          if (o.name != "") {
            // and the relationships
            i.related_nodes.push(o.id);
            o.related_links.push(l.id);
          }
          if (i.name != "") {
            i.related_links.push(l.id);
            o.related_nodes.push(i.id);
          }
        });
      });

      data = {
        inner: inner,
        outer: outer.values(),
        links: links
      };

      // sort the data -- TODO: have multiple sort options
      outer = data.outer;
      data.outer = Array(outer.length);

      var i1 = 0;
      var i2 = outer.length - 1;

      for (var i = 0; i < data.outer.length; ++i) {
        if (i % 2 == 1) data.outer[i2--] = outer[i];
        else data.outer[i1++] = outer[i];
      }

      // from d3 colorbrewer:
      // This product includes color specifications and designs developed by Cynthia Brewer (http://colorbrewer.org/).
      var colors = [
        "#a50026",
        "#d73027",
        "#f46d43",
        "#fdae61",
        "#fee090",
        "#ffffbf",
        "#e0f3f8",
        "#abd9e9",
        "#74add1",
        "#4575b4",
        "#313695"
      ];
      var color = d3
        .scaleLinear()
        .domain([10, 220])
        .range([colors.length - 1, 0])
        .clamp(true);

      var diameter = 960;
      var rect_width = 40;
      var rect_height = 14;

      var link_width = "1px";

      var il = data.inner.length;
      var ol = data.outer.length;

      var inner_y = d3
        .scaleLinear()
        .domain([0, il])
<<<<<<< HEAD
        .range([-(il * rect_height) / 2, (il * rect_height) / 2]);

      mid = (data.outer.length / 2.0)
      var outer_x = d3.scaleLinear()
        .domain([0, mid, mid, data.outer.length])
        .range([15, 170, 190, 355]);

      // var outer_y = d3.scale.linear()
      //     .domain([0, data.outer.length])
      //     .range([0, diameter / 2 - 120]);
      var outer_y = d3.scaleLinear()
        .domain([0, ol])
        .range([-(ol * rect_height) / 2, (ol * rect_height) / 2]);
=======
        .range([-(il * rect_height), il * rect_height]);

      mid = data.outer.length / 2.0;
      var outer_y = d3
        .scaleLinear()
        .domain([0, ol])
        .range([-(ol * rect_height), ol * rect_height]);

      // setup positioning
      data.outer = data.outer.map(function(d, i) {
        d.x = diameter / 2 - diameter / 4;
        d.y = outer_y(i);
        return d;
      });
>>>>>>> eb7fafd51e1d12ab07f85c544479bf789f2c8800

      // setup positioning
      data.outer = data.outer.map(function(d, i) {
        d.x = diameter / 2 - diameter / 4;
        d.y = outer_y(i);
        return d;
      });

      data.inner = data.inner.map(function(d, i) {
        d.x = -(diameter / 2 - diameter / 4);
        d.y = inner_y(i);
        return d;
      });

      function get_color(a, v) {
        console.log("Color parameters" + a + "    " + v);
        console.log(d3.interpolateRainbow(v / a));
        return d3.interpolateRainbow(v / a);
        // var c = Math.round(color(name));
        //     if (isNaN(c))
        //         return '#dddddd';	// fallback color

        //     return colors[c];
      }

      // Can't just use d3.svg.diagonal because one edge is in normal space, the
      // other edge is in radial space. Since we can't just ask d3 to do projection
      // of a single point, do it ourselves the same way d3 would do it.

      function projectX(x) {
        return ((x - 90) / 180) * Math.PI - Math.PI / 2;
      }

      var diagonal = function link(d) {
        return (
          "M " +
          d.outer.x +
          " " +
          (d.outer.y + rect_height / 2) +
          "C " +
          (d.outer.x - 50) +
          " " +
          d.outer.y +
          " " +
          (d.inner.x + rect_width + 50) +
          " " +
          d.inner.y +
          " " +
          (d.inner.x + rect_width) +
          " " +
          (d.inner.y + rect_height / 2)
        );
      };

      var svg = d3
        .select(".graph")
        .append("svg")
        .attr("width", diameter)
        .attr("height", diameter)
        .append("g")
        .attr(
          "transform",
          "translate(" + diameter / 3 + "," + diameter / 3 + ")"
        );

      // links
      var link = svg
        .append("g")
        .attr("class", "links")
        .selectAll(".link")
        .data(data.links)
        .enter()
        .append("path")
        .attr("class", "link")
        .attr("id", function(d) {
          return d.id;
        })
        .attr("d", diagonal)
        .attr("stroke", function(d) {
          // return get_color(data.inner.length, d.inner.index);
          return "#4A4A4A";
        })
        .attr("stroke-width", link_width)
        .style("opacity", 0.2);

      // outer nodes

      var onode = svg
        .append("g")
        .selectAll(".outer_node")
        .data(data.outer)
        .enter()
        .append("g")
        .attr("class", "outer_node")
        .attr("transform", function(d) {
          return "translate(" + d.x + "," + d.y + ")";
        })
        .on("mouseover", mouseover)
        .on("mouseout", mouseout);

<<<<<<< HEAD
      onode.append("rect")
        .attr('width', rect_width * 2.5)
        .attr('height', rect_height)
        .attr('id', function (d) { return d.id; })
        .attr('fill', function (d) { return "#ffffff"; });
=======
      onode
        .append("rect")
        .attr("width", rect_width * 8)
        .attr("height", rect_height)
        .attr("id", function(d) {
          return d.id;
        })
        .attr("fill", function(d) {
          return "#ffffff";
        });
>>>>>>> eb7fafd51e1d12ab07f85c544479bf789f2c8800

      // onode.append("circle")
      //     .attr('r', 20)
      //     .attr('visibility', 'hidden');

      onode
        .append("text")
        .attr("id", function(d) {
          return d.id + "-txt";
        })
        .attr("dy", ".31em")
        .attr("text-anchor", function(d) {
          return "start";
        })
        .attr(
          "transform",
          "translate(" + rect_width * 0.15 + ", " + rect_height * 0.5 + ")"
        )
        // .attr("cx", )
        .text(function(d) {
          return d.name;
        });

      // inner nodes

      var inode = svg
        .append("g")
        .selectAll(".inner_node")
        .data(data.inner)
        .enter()
        .append("g")
        .attr("class", "inner_node")
        .attr("transform", function(d, i) {
          return "translate(" + d.x + "," + d.y + ")";
        })
        .on("mouseover", mouseover)
        .on("mouseout", mouseout);

<<<<<<< HEAD
      inode.append('rect')
        .attr('width', rect_width)
        .attr('height', rect_height)
        .attr('id', function (d) { return d.id; })
        .attr('fill', function (d) { return "#ffffff"; });
=======
      inode
        .append("rect")
        .attr("width", rect_width * 4)
        .attr("height", rect_height)
        .attr("id", function(d) {
          return d.id;
        })
        .attr("fill", function(d) {
          return "#ffffff";
        });
>>>>>>> eb7fafd51e1d12ab07f85c544479bf789f2c8800

      inode
        .append("text")
        .attr("id", function(d) {
          return d.id + "-txt";
        })
        .attr("text-anchor", "start")
        .attr(
          "transform",
          "translate(" + rect_width / 2 + ", " + rect_height * 0.75 + ")"
        )
        .text(function(d) {
          return d.name;
        });

      // need to specify x/y/etc

      d3.select(self.frameElement).style("height", diameter - 150 + "px");

      function mouseover(d) {
        // bring to front
        d3.selectAll(".links .link").sort(function(a, b) {
          return d.related_links.indexOf(a.id);
        });

        for (var i = 0; i < d.related_nodes.length; i++) {
          d3.select("#" + d.related_nodes[i]).classed("highlight", true);
          d3.select("#" + d.related_nodes[i] + "-txt").attr(
            "font-weight",
            "bold"
          );
        }

        for (var i = 0; i < d.related_links.length; i++)
          d3.select("#" + d.related_links[i])
            .attr("stroke-width", "1.5px")
            .style("opacity", 1);
      }

      function mouseout(d) {
        for (var i = 0; i < d.related_nodes.length; i++) {
          d3.select("#" + d.related_nodes[i]).classed("highlight", false);
          d3.select("#" + d.related_nodes[i] + "-txt").attr(
            "font-weight",
            "normal"
          );
        }

        for (var i = 0; i < d.related_links.length; i++)
          d3.select("#" + d.related_links[i])
            .attr("stroke-width", link_width)
            .style("opacity", 0.2);
      }
    }
  });
</script>
