<style>
  #accordion {
    font-family: 'Source Sans Pro', sans-serif;
  }
</style>
<div class="container">
  <div class="row mt-3">
    <div class="col-md-4 ingredient-name"></div>
    <div class="col-md-3">
      <div class="form-group">
        <input type="text" class='form-control input-ingredient' list="ingredients" placeholder="Search Ingredient"
          autocomplete="off">
        <datalist id="ingredients"></datalist>
      </div>

    </div>
    <div class="col-md-1">
      <button class="btn btn-primary search-ingredient">Search</button>
    </div>
    <div class="col-md-4 overview-relationship">
      <div id="overview-relationship-btns" class="btn-group btn-group-toggle" data-toggle="buttons">
        <label class="btn btn-outline-info active">
          <input type="radio" name="overview" autocomplete="off" value="overview"> Overview
        </label>
        <label class="btn btn-outline-info">
          <input type="radio" name="relationship" autocomplete="off" value="relationship"> Effective for
        </label>
        <label class="btn btn-outline-info">
          <input type="radio" name="supplement-relationship" autocomplete="off" value="supplement-relationship">
          Adverse Reaction
        </label>
      </div>
    </div>
  </div>
</div>
<div class="row mt-4">
  <div class="col-md-1"></div>
  <div class="col-md-10 overview-view">
    <div id="accordion">

    </div>
  </div>
  <div class="col-md-10 relationship-view">
    <div id="graph"></div>
  </div>
  <div class="col-md-10 supplement-relationship-view">
    <div id="graph-2"></div>
  </div>
  <div class="col-md-1"></div>

</div>
</div>
<script>
  $(document).ready(function () {
    var dataJSON = [];
    $("#accordion").accordion({ heightStyle: "content" });
    $('.overview-relationship').hide();
    $('.relationship-view').hide();
    $('.supplement-relationship-view').hide();
    $('.input-ingredient').on("change paste input", function () {
      var inputName = $('.input-ingredient').val();
      $.ajax({
        type: 'GET',
        crossDomain: true,
        // dataType: 'jsonp',
        url: 'http://localhost:8080/KeyWords?type=3&name=' + inputName,
        success: function (jsondata) {
          console.log(jsondata);
          $("#ingredients").empty();
          $.each(jsondata, function (key, value) {
            $("#ingredients").append("<option value=\"" + value + "\">")
          });
        }
      })
    });

    $('.search-ingredient').on('click', function () {
      $('.relationship-view #graph').html('');
      $('.supplement-relationship-view #graph-2').html('');
      var ingredient = $('.input-ingredient').val();
      var flag = false;

      $.ajax({
        type: 'GET',
        crossDomain: true,
        // dataType: 'jsonp',
        url: 'http://localhost:8080/detail?type=3&name=' + ingredient,
        success: function (data) {
          $('.overview-relationship').show();
          $('.input-ingredient').val('');
          $('.ingredient-name').html('');
          $('.ingredient-name').append("<h3>" + data.name + "</h3>")
          $('#accordion').html('');
          // console.log(data.name);


          $.each(data, function (i, obj) {
            if (i == "name" || i == "ui" || i == "umls_semantic_type") {
              //continue
            } else {
              flag = true;
              $('#accordion').append("<h3>" + i + "</h3><div><p>" + obj + "</p></div>");
              $("#accordion").accordion('refresh');
            }

          });
          if (flag == false) {
            $('#accordion').append("<h5 style='margin-left:450px;'> No content available </h5>");
          }
        }
      });

      $.ajax({
        type: 'GET',
        crossDomain: true,
        // dataType: 'jsonp',
        url: 'http://localhost:8080/IngredientEffectiveFor?type=3&name=' + ingredient,
        success: function (data) {
          console.log("Is effective for", data);
          var arr = data
          source = ingredient

          dataJSON = genJSON(source, arr);
          // console.log(JSON.stringify(json));
          create_vis("#graph");
        }
      });

      $.ajax({
        type: 'GET',
        crossDomain: true,
        // dataType: 'jsonp',
        url: 'http://localhost:8080/IngredientComponentOf?type=3&name=' + ingredient,
        success: function (data) {
          console.log("Is component of", data);
          var num = Math.floor(Math.random() * 30)
          var arr = data.slice(1, num);
          source = ingredient

          dataJSON = genJSON(source, arr);
          // console.log(JSON.stringify(json));
          create_vis("#graph-2");
        }
      });

    });
    $('input[name=relationship]').click(function () {
      $('.overview-view').hide();
      $('.relationship-view').show();
      $('.supplement-relationship-view').hide();
      $(this).parent().addClass('active');
      if ($('input[name=overview]').parent().hasClass('active')) {
        $('input[name=overview]').parent().removeClass('active');
      }
      if ($('input[name=supplement-relationship]').parent().hasClass('active')) {
        $('input[name=supplement-relationship]').parent().removeClass('active');
      }
    })
    $('input[name=overview]').click(function () {
      $('.overview-view').show();
      $('.relationship-view').hide();
      $('.supplement-relationship-view').hide();
      $(this).parent().addClass('active');
      if ($('input[name=relationship]').parent().hasClass('active')) {
        $('input[name=relationship]').parent().removeClass('active');
      }
      if ($('input[name=supplement-relationship]').parent().hasClass('active')) {
        $('input[name=supplement-relationship]').parent().removeClass('active');
      }
    })
    $('input[name=supplement-relationship]').click(function () {
      $('.overview-view').hide();
      $('.relationship-view').hide();
      $('.supplement-relationship-view').show();
      $(this).parent().addClass('active');
      if ($('input[name=overview]').parent().hasClass('active')) {
        $('input[name=overview]').parent().removeClass('active');
      }
      if ($('input[name=relationship]').parent().hasClass('active')) {
        $('input[name=relationship]').parent().removeClass('active');
      }
    })

    function create_vis(id) {

      height = 300;
      width = 300;

      function color(d) {
        const scale = d3.schemeCategory10;
        return scale[d.group];
      }


      function drag(simulation) {

        function dragstarted(d) {
          if (!d3.event.active) simulation.alphaTarget(0.3).restart();
          d.fx = d.x;
          d.fy = d.y;
        }

        function dragged(d) {
          d.fx = d3.event.x;
          d.fy = d3.event.y;
        }

        function dragended(d) {
          if (!d3.event.active) simulation.alphaTarget(0);
          d.fx = null;
          d.fy = null;
        }

        return d3.drag()
          .on("start", dragstarted)
          .on("drag", dragged)
          .on("end", dragended);
      }

      console.log("Creating vis")
      const links = dataJSON.links.map(d => Object.create(d));
      const nodes = dataJSON.nodes.map(d => Object.create(d));

      const simulation = d3.forceSimulation(nodes)
        .force("link", d3.forceLink(links).id(d => d.id).distance(10))
        .force("charge", d3.forceManyBody().strength(-100))
        .force("center", d3.forceCenter(width / 2, height / 4));

      const svg = d3.select(id)
        .append("svg")
        .attr("viewBox", [0, 0, width, height / 1.8]);


      const link = svg.append("g")
        .attr("stroke", "#999")
        .attr("stroke-opacity", 0.6)
        .selectAll("line")
        .data(links)
        .join("line")
        .attr("stroke-width", d => Math.sqrt(d.value / 4));

      const node = svg.append("g")
        .attr("stroke", "#fff")
        .attr("stroke-width", 1)
        .selectAll("circle")
        .data(nodes)
        .join("circle")
        .attr("r", 3)
        .attr("fill", color)
        .call(drag(simulation));

      node.append("title")
        .text(d => d.id);

      var texts = svg.selectAll("text.label")
        .data(nodes)
        .enter().append("text")
        .attr("class", "label")
        .attr("fill", "black")
        .text(function (d) { return d.name; });



      simulation
        .on("tick", () => {
          link
            .attr("x1", d => d.source.x)
            .attr("y1", d => d.source.y)
            .attr("x2", d => d.target.x)
            .attr("y2", d => d.target.y);

          node
            .attr("cx", d => d.x)
            .attr("cy", d => d.y);

          texts.attr("transform", function (d) {
            return "translate(" + d.x + "," + d.y + ")";
          });

        });
    }

    function genJSON(source, targetArray) {
      console.log("GetJsonCalled");
      var jsonData = {};
      jsonData["nodes"] = [];
      jsonData["links"] = [];
      jsonData["nodes"].push({ "id": source, "group": 1 })
      targetArray.forEach(function (item) {
        jsonData["nodes"].push({ "id": item, "group": 2 })
        jsonData["links"].push({ "source": source, "target": item, "value": 5 });
      });
      return jsonData;
    }



  });
</script>